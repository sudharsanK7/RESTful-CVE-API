import csv
import os
import sqlite3
import chardet

DATABASE = 'cve_db.db'

def get_db_connection():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

def import_data(csv_file):
    # Getting the path of the root directory
    script_dir = os.path.dirname(os.path.abspath(__file__))

    # Getting the absolute path to the csv
    csv_path = os.path.join(script_dir, csv_file)

    # Connecting to sqlite database
    conn = get_db_connection()
    cursor = conn.cursor()

    # Creating the table if not already exist
    cursor.execute('''CREATE TABLE IF NOT EXISTS cve_database (
                        id INTEGER PRIMARY KEY,
                        cve_id TEXT,
                        severity TEXT,
                        cvss TEXT,
                        affected_packages TEXT,
                        description TEXT,
                        cwe_id TEXT
                    )''')

    # Reading the csv file to insert into table
    with open(csv_path, 'rb') as rawdata:
        result = chardet.detect(rawdata.read(150000))  # read some amount of your file to guess
    encoding = result['encoding']
    with open(csv_path, 'r', encoding=encoding) as file:
        csv_reader = csv.reader(file)
        next(csv_reader)  # Skipping initial header/comment lines
        for row in csv_reader:
            # Skip rows that are not data entries
            if len(row) != 7 or not row[0].startswith("CVE-"):
                continue

            # Checking if the entry already exists in table
            cursor.execute("SELECT id FROM cve_database WHERE cve_id=?", (row[0],))
            existing_row = cursor.fetchone()
            if existing_row is None:
                # Inserting if entry does not exist already
                cursor.execute('''INSERT INTO cve_database (cve_id, severity, cvss, affected_packages, description, cwe_id)
                                VALUES (?, ?, ?, ?, ?, ?)''', (row[0], row[1], row[2], row[3], row[4], row[5]))
    conn.commit()
    conn.close()

# Importing the data
import_data('CVE_DATABASE.csv')
